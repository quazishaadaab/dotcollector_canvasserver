class Setup{
  constructor(wide,long,rows,cols){
    this.wide=wide
    this.long=long
    this.rows=rows
    this.cols=cols
    this.gap_h=wide/cols
    this.gap_v=long/rows

  }
}

//create a datastructure to hold all dot objects.this will be a 2D matrix called grid
//its dimensions will be rowxcolumn determined by s.row and s.col
class Dot{
constructor(row,column,gap_h,gap_v){
    this.color="white"
    this.row=row 
    this.column=column
    this.x = (column-1)*gap_h
    this.y= (row-1)*gap_v
    this.gap_h=gap_h
    this.gap_v=gap_v
    this.value
    // this.input=createInput("")
}
static checkColor(color){
return this.color==color  
                        }

 setColor(){
  if(
    this.value>=1 && this.value<=4){this.color="#f64a2b"}
  else if(this.value>=5 && this.value<=6){this.color="#686868"}
  else if(this.value>=7&&this.value<=10){this.color="#1c7220"}
  else{window.alert( "Number invalid. Enter a number from 0-10 based on merit.")}

  return this.color
   }
  
                      
static checkValue(value){
  return this.value==value
}
 setValue(value){

  if(value>=1 && value<=10)
   this.value=value
  else
  this.value=null
}
 drawRect(){

ctx.fillStyle=this.color
ctx.fillRect(this.x,this.y,this.gap_h-.5,this.gap_v-.5)
}
  
}












  const s=new Setup(400,600,6,4);






  

function setup() {
  createCanvas(s.wide, s.long);
noLoop()

   
}


function draw() {
  
  
  background("grey");
//   let mousePointerCol =ColSelector(winMouseX,s.cols,s.wide)
// let mousePointerRow=RowSelector(winMouseY,s.rows,s.long)

  drawCleanerLine(s.rows,s.cols,s.gap_h,s.gap_v,s.wide,s.long);
  if(mouseIsPressed){
mousePressed()
  }

}

// function mousePressed(){
//   let mousePointerCol =ColSelector(winMouseX,s.cols,s.wide)
// let mousePointerRow=RowSelector(winMouseY,s.rows,s.long)

// // get numerical input from the user 
// //decide upon the color-number value (if 8-10 : green, if 0-4: red, if 5-7: good )
// //create new object passing its value and color 

// // let d = new Dot(mousePointerRow,mousePointerCol,s.gap_h,s.gap_v)

// //   d.drawRect();  

// // d.drawInput();

// // console.log(d.value)  
// // grid[mousePointerRow-1][mousePointerCol-1]=d;



// }

 


function RowSelector(y,rows,long){
  count=0
  let vert = y
  while(count<rows){
    if(100*count<=vert && vert<=100*(count+1))
      return count+1
    else if (vert<0 || vert>long){
      print("Enter a valid coordinate")
      return null

    }
count++
  }
}
function ColSelector(x,cols,wide){
  count=0
  let hor = x
  while(count<cols){
    if(100*count<=hor && hor<=100*(count+1))
      return count+1
    else if (hor<0 || hor>wide){
      print("Enter a valid coordinate")
      return null

    }
count++
  }
}

function drawCleanerLine(rows,cols,gap_h,gap_v,wide,long) {
  for( let i=1 ; i<=cols-1;i++){
      line(gap_h*i,0,gap_h*i,long)
  }
  for ( let j=1;j<=rows-1;j++){
      line(0,gap_v*j,wide,gap_v*j)

  }
  
  
}

// console.log(grid)
// function drawRect(rows,cols,gap_h,gap_v){
//   for ( let i=0;i<rows;i++){
//     for(let j=1;j<cols;j++){
//       rect(gap_h*i,0,gap_h,gap_v)
//       rect(gap_v*i,gap_v*j,gap_h,gap_v)      
//     }
//   }
  
// }
 
